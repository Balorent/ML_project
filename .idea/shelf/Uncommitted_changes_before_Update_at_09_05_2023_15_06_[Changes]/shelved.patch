Index: format.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nfrom PIL import Image, ImageOps, ImageFilter\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ndef center(image):\r\n    row = np.sum(image, axis=1)\r\n    row = row / np.sum(row)\r\n    mean_row = float(np.sum(row * range(len(row))))\r\n\r\n    col = np.sum(image, axis=0)\r\n    col = col / np.sum(col)\r\n    mean_col = float(np.sum(col * range(len(col))))\r\n\r\n    return round(mean_row)+1, round(mean_col)+1\r\n\r\n\r\ndef center_box(row_center, col_center, image):\r\n    left, top, right, bottom = col_center, row_center, col_center, row_center\r\n    end = False\r\n    begin = False\r\n    found_left, found_top, found_right, found_bottom = False, False, False, False\r\n    while not end:\r\n        if not found_left:\r\n            left -= 10\r\n        if not found_top:\r\n            top -= 10\r\n        if not found_right:\r\n            right += 10\r\n        if not found_bottom:\r\n            bottom += 10\r\n\r\n        left_side = np.array(image)[:, left]\r\n\r\n        if begin and not left_side.any() and not found_left:\r\n            found_left = True\r\n        top_side = np.array(image)[top, :]\r\n        if begin and not top_side.any() and not found_top:\r\n            found_top = True\r\n        right_side = np.array(image)[:, right]\r\n        if begin and not right_side.any() and not found_right:\r\n            found_right = True\r\n        bottom_side = np.array(image)[bottom, :]\r\n        if begin and not bottom_side.any() and not found_bottom:\r\n            found_bottom = True\r\n\r\n        border = np.concatenate((left_side, top_side, right_side, bottom_side))\r\n\r\n        if not begin:\r\n            if border.any():\r\n                begin = True\r\n        else:\r\n            if not border.any():\r\n                end = True\r\n    return left, top, right, bottom\r\n\r\n\r\ndef binary_format(image):\r\n    # Transforms the image into a black and white version where the digits / letters are in white (value = 255) and\r\n    # that background is in black (value = 0)\r\n\r\n    # Negative of the image\r\n    binary_image = ImageOps.invert(image)\r\n\r\n    # remove the border (4 pixels of each side) because my phone creates black pixels in the four corners\r\n    col_nbr, row_nbr = binary_image.size\r\n    binary_image = binary_image.crop((4, 4, col_nbr - 4, row_nbr - 4))\r\n    col_nbr, row_nbr = binary_image.size\r\n\r\n    # Remove the background : it is often on the edges that the background is the lighter, then the maximum value of an\r\n    # edge pixel is taken as being the maximal value of background :\r\n    # - If a pixel is darker that that threshold, it will be black\r\n    # - Else, it will be white\r\n    left_side = np.array(binary_image)[:, 0]\r\n    top_side = np.array(binary_image)[0, :]\r\n    right_side = np.array(binary_image)[:, col_nbr - 1]\r\n    bottom_side = np.array(binary_image)[row_nbr - 1, :]\r\n    border = np.concatenate((left_side, top_side, right_side, bottom_side))\r\n    threshold = np.max(border)\r\n    binary_image = np.maximum(binary_image, threshold)\r\n    binary_image = Image.fromarray((binary_image != threshold))\r\n\r\n    # return\r\n    return binary_image\r\n\r\n\r\ndef standard_format(image):\r\n    standard_image = image\r\n\r\n    # center the digit\r\n    row_center, col_center = center(standard_image)\r\n    center_frame = center_box(row_center, col_center, standard_image)\r\n    standard_image = standard_image.crop(center_frame)\r\n    col_nbr, row_nbr = standard_image.size\r\n    if col_nbr > row_nbr:\r\n        add_col = int(col_nbr / 3)\r\n        new_size = col_nbr + 2*add_col\r\n        add_row = int((new_size - row_nbr)/2)\r\n\r\n    else:\r\n        add_row = int(row_nbr / 3)\r\n        new_size = row_nbr + 2 * add_row\r\n        add_col = int((new_size - col_nbr) / 2)\r\n\r\n    standard_image = ImageOps.expand(standard_image, border=(\r\n    add_col, add_row, add_col, add_row), fill=0)\r\n\r\n    #resize to 128x128\r\n    standard_image = standard_image.resize((128, 128))\r\n\r\n    # return\r\n    return standard_image\r\n\r\n\r\ndef emnist_format(image):\r\n    # Apply Gaussian blur\r\n    # (a) -> (b)\r\n    emnist_image = image.convert('L')\r\n    emnist_image = emnist_image.filter(ImageFilter.GaussianBlur(radius=1))\r\n\r\n    # Remove the margins\r\n    # (b) -> (c)\r\n    row = np.sum(emnist_image, axis=0)\r\n    non_zero_row = np.nonzero(row)\r\n    row_min, row_max = np.min(non_zero_row), np.max(non_zero_row)\r\n    col = np.sum(emnist_image, axis=1)\r\n    non_zero_col = np.nonzero(col)\r\n    col_min, col_max = np.min(non_zero_col), np.max(non_zero_col)\r\n    emnist_image = emnist_image.crop((row_min, col_min, row_max, col_max))\r\n\r\n    # Center the digit/letter in a square image\r\n    # (c) -> (d)\r\n    row_center, col_center = center(emnist_image)\r\n    col_count, row_count = emnist_image.size\r\n    while row_count != col_count:\r\n        if row_count < col_count:\r\n            if row_center <= row_count / 2:\r\n                emnist_image = ImageOps.expand(emnist_image, border=(0, 1, 0, 0), fill=0)\r\n                row_center += 1\r\n            else:\r\n                emnist_image = ImageOps.expand(emnist_image, border=(0, 0, 0, 1), fill=0)\r\n            row_count += 1\r\n        else:\r\n            if col_center <= col_count / 2:\r\n                emnist_image = ImageOps.expand(emnist_image, border=(1, 0, 0, 0), fill=0)\r\n                col_center += 1\r\n            else:\r\n                emnist_image = ImageOps.expand(emnist_image, border=(0, 0, 1, 0), fill=0)\r\n            col_count += 1\r\n    emnist_image = ImageOps.expand(emnist_image, border=(2, 2, 2, 2), fill=0)\r\n\r\n    # reformat to 28x28 pixels\r\n    # (d) -> (e)\r\n    emnist_image = emnist_image.resize((28, 28))\r\n\r\n    # return\r\n    return emnist_image\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/format.py b/format.py
--- a/format.py	(revision b0a0c5ba3a8e2fe35b03ef0c494747ed255d1692)
+++ b/format.py	(date 1683637472310)
@@ -7,11 +7,9 @@
     row = np.sum(image, axis=1)
     row = row / np.sum(row)
     mean_row = float(np.sum(row * range(len(row))))
-
     col = np.sum(image, axis=0)
     col = col / np.sum(col)
     mean_col = float(np.sum(col * range(len(col))))
-
     return round(mean_row)+1, round(mean_col)+1
 
 
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1683637395572)
+++ b/.idea/vcs.xml	(date 1683637395572)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
